{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import os\n",
    "import h5py\n",
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "import matplotlib.pyplot as plt\n",
    "import cv2 as cv\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score\n",
    "from sklearn.metrics import accuracy_score\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "from sklearn.metrics import confusion_matrix\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Preprocessing\n",
    "X, Y = [], []\n",
    "img_size= (160, 160)\n",
    "for root,_,files in os.walk(\"C:/Users/91918/Downloads/Uma/Uma/fire_dataset/fire_images\"):\n",
    "    for file in files:\n",
    "        x = cv.imread(os.path.join(root, file))\n",
    "        if(x is None):\n",
    "            print(file)\n",
    "            continue\n",
    "        x = cv.resize(x, img_size, interpolation=cv.INTER_AREA)\n",
    "        X.append(x/255.0)\n",
    "        Y.append(1)\n",
    "for root,_,files in os.walk(\"C:/Users/91918/Downloads/Uma/Uma/fire_dataset/non_fire_images\"):\n",
    "    for file in files:\n",
    "        x = cv.imread(os.path.join(root, file))\n",
    "        if(x is None):\n",
    "            print(file)\n",
    "            continue\n",
    "        x = cv.resize(x, img_size, interpolation=cv.INTER_AREA)\n",
    "        X.append(x/255.0)\n",
    "        Y.append(0)\n",
    "\n",
    "X = np.stack(X)\n",
    "Y = np.asarray(Y)\n",
    "num_fire_images = np.sum(Y == 1)\n",
    "num_non_fire_images = np.sum(Y == 0)\n",
    "print(\"Number of Fire Images:\", num_fire_images)\n",
    "print(\"Number of non-Fire Images:\", num_non_fire_images)\n",
    "X_tv, X_test, Y_tv, Y_test = train_test_split(X, Y, test_size = 0.1, shuffle=True, stratify=Y, random_state=1)\n",
    "X_train, X_val, Y_train, Y_val = train_test_split(X_tv, Y_tv, test_size=0.2, shuffle=True, stratify=Y_tv, random_state=2)\n",
    "class_weights = {0:num_fire_images/X.shape[0], 1:num_non_fire_images/X.shape[0]}\n",
    "print(\"Class Weights:\",class_weights)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Model \n",
    "\n",
    "from keras.models import Sequential\n",
    "from keras import layers\n",
    "model = Sequential()\n",
    "\n",
    "model.add(layers.Conv2D(512,(3,3),input_shape = (160,160,3),activation='relu'))\n",
    "model.add(layers.MaxPooling2D(3,3))\n",
    "model.add(layers.Conv2D(224,(3,3),activation='relu'))\n",
    "model.add(layers.MaxPooling2D(3,3))\n",
    "model.add(layers.Conv2D(128,(3,3),activation='relu'))\n",
    "model.add(layers.MaxPooling2D(3,3))\n",
    "\n",
    "model.add(layers.Flatten())\n",
    "\n",
    "model.add(layers.Dense(256, activation = 'relu'))\n",
    "model.add(layers.Dense(64,activation = 'relu'))\n",
    "model.add(layers.Dense(1,activation= \"sigmoid\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "callbacks = [EarlyStopping(monitor = 'val_loss',patience = 18,restore_best_weights=True)]\n",
    "model.compile(optimizer='adam',loss = 'binary_crossentropy',metrics=['accuracy'])\n",
    "model.fit(X_train,Y_train,validation_data=(X_val,Y_val),epochs = 30,batch_size = 32,callbacks = callbacks)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Model testing\n",
    "Y_pred = (model.predict(X_test)>0.5).astype(np.int64)\n",
    "acc = accuracy_score(Y_test, Y_pred)\n",
    "rec = recall_score(Y_test, Y_pred)\n",
    "pre = precision_score(Y_test, Y_pred)\n",
    "\n",
    "print(\"Test Accuracy:\",acc*100)\n",
    "print(\"Test Precision:\",pre*100)\n",
    "print(\"Test Recall:\",rec)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#CONFUSION MATRIX\n",
    "plt.figure(figsize = (20,20))\n",
    "\n",
    "sns.heatmap(confusion_matrix(Y_test,Y_pred),annot = True)\n",
    "plt.title(\"CONFUSION MATRIX\")\n",
    "plt.xlabel(\"Predicted\")\n",
    "plt.ylabel(\"True\")\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.save(\"Trained_Model2.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = model.predict(X_test)\n",
    "y_pred = y_pred.reshape(-1)\n",
    "y_pred[y_pred<0.5] = 0\n",
    "y_pred[y_pred>=0.5] = 1\n",
    "y_pred = y_pred.astype('int')\n",
    "y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.preprocessing import image\n",
    "image_path = \"C:/Users/91918/Downloads/nonfire.png\"\n",
    "img = image.load_img(image_path,target_size=(160,160))\n",
    "x = image.img_to_array(img)\n",
    "x = np.expand_dims(x,axis=0)\n",
    "Diff_Pred = model.predict(x)\n",
    "classIndex = model.predict_classes(x)\n",
    "print(classIndex)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.preprocessing import image\n",
    "image_path = \"C:/Users/91918/Downloads/fire.png\"\n",
    "img = image.load_img(image_path,target_size=(160,160))\n",
    "x = image.img_to_array(img)\n",
    "x = np.expand_dims(x,axis=0)\n",
    "Diff_Pred = model.predict(x)\n",
    "classIndex = model.predict_classes(x)\n",
    "print(classIndex)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
